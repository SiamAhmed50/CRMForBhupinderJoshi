@page
@model ClientTasksModel

@{
    ViewData["Title"] = "Clients";
}
 
    <div class="row">
        <div class="col-sm-6 text-start">
            <h2>Task</h2>
        </div>
        <div class="col-sm-6 text-end">
            <button type="button" class="btn btn-primary waves-effect waves-light" data-bs-toggle="modal" data-bs-target="#TaskModel">
                Add Task
            </button>
        </div>
    </div>
    <div class="container mt-4">




        <table id="clientTable" class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th hidden>Id</th>
                    <th>Client Name</th>                    
                    <th>Task Name</th>                  
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
            @* @foreach(var task in Model.ClientTasks)
            {
                <tr>
                    <td hidden>@task.Id</td>
                    <td>@task.Client?.Name</td>
                    <td>@task.Client?.ClientId</td>
                    <td>@foreach(var i in task.Tasks)
                        {
                            <span>@i.Name</span> <br>
                        }
                    </td>
                    <td>
                        @foreach (var i in task.Tasks)
                        {
                            <span>@i.TaskId</span> <br>
                        }
                    </td>
                    <td>
                        <div class="dropdown ms-auto" style="cursor:pointer;">
                            
                            <i class="fas fa-ellipsis-vertical" data-bs-toggle="dropdown" aria-expanded="false"></i>
                            <ul class="dropdown-menu">
                                <li>
                                    <span class="dropdown-item edit-client" style="cursor:pointer;">
                                        <i class="fas fa-pen mx-2"></i> Update
                                    </span>
                                </li>
                                <li>
                                    <span class="dropdown-item delete-client" style="cursor:pointer;">
                                        <i class="fas fa-trash mx-2"></i> Delete
                                    </span>
                                </li>
                            </ul>
                        </div>
                    </td>
                </tr>
            } *@
        </tbody>
        </table>
    </div>

    <div class="mt-3">
        <!-- Button trigger modal -->
        <!-- Modal -->
    <div class="modal fade" id="TaskModel" tabindex="-1" aria-hidden="true" style="display: none;">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <form method="post">


                        <div class="modal-header">
                            <h4 class="modal-title" id="exampleModalLabel1">Task Details</h4>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                        <!-- Dropdown for Clients -->
                        <div class="mb-3">
                            <label for="clientId" class="form-label">Select Client</label>
                            <select class="form-select" id="clientId" name="ClientTaskModel.ClientId" required>
                                <option value="">Select Client</option>
                                @if(Model.Clients.Count > 0)
                                {
                                    foreach (var client in Model.Clients)
                                    {
                                        <option value="@client.Id">@client.Name</option>
                                    }
                                }
                              
                            </select>
                        </div>

                        <!-- Task Name Input and Dynamic Rows -->
                        <div id="taskRows">
                            <div class="mb-3">
                                <label for="taskName" class="form-label">Task Name</label>
                                <input type="text" class="form-control" name="ClientTaskModel.Tasks[0].Name" required>
                            </div>
                        </div>

                        <!-- Add and Delete Buttons -->
                        <div class="text-end">
                            <button type="button" class="btn btn-success" onclick="addTaskRow()">Add</button>
                        </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-outline-secondary waves-effect" data-bs-dismiss="modal">
                                Close
                            </button>
                            <button type="submit" class="btn btn-primary waves-effect waves-light">Save changes</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

@*     <div class="modal fade" id="clientModalEdit" tabindex="-1" aria-hidden="true" style="display: none;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <form method="post" asp-page-handler="Update">

                    <input asp-for="ClientModel.Id" type="hidden"/>
                    <div class="modal-header">
                        <h4 class="modal-title" id="exampleModalLabel1">Client Details</h4>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col mb-4 mt-2">
                                <div class="form-floating form-floating-outline">
                                    <input type="text" asp-for="ClientModel.Name" class="form-control" placeholder="Enter Name">
                                    <label for="nameBasic">Name</label>
                                </div>
                            </div>
                        </div>
                        <div class="row g-2">
                            <div class="col mb-2">
                                <div class="form-floating form-floating-outline">
                                    <input type="text" asp-for="ClientModel.ClientId" class="form-control" placeholder="Enter Client ID" readonly>
                                    <label for="clientIdBasic">Client ID</label>
                                </div>
                            </div>
                            <div class="col mb-2">
                                <div class="form-floating form-floating-outline">
                                    <input type="text" asp-for="ClientModel.LicenseNumber" class="form-control" placeholder="Enter License Number" readonly>
                                    <label for="licenseNumberBasic">License Number</label>
                                </div>
                            </div>
                        </div>
                        <div class="row g-2">
                            <div class="col mb-2">
                                <div class="form-floating form-floating-outline">
                                    <input type="date" asp-for="ClientModel.LicenseStartDate" class="form-control">
                                    <label for="licenseStartDateBasic">License Start Date</label>
                                </div>
                            </div>
                            <div class="col mb-2">
                                <div class="form-floating form-floating-outline">
                                    <input type="date" asp-for="ClientModel.LicenseEndDate" class="form-control">
                                    <label for="licenseEndDateBasic">License End Date</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-secondary waves-effect" data-bs-dismiss="modal">
                            Close
                        </button>
                        <button type="submit" class="btn btn-primary waves-effect waves-light">Save changes</button>
                    </div>
                </form>
            </div>
        </div>
    </div> *@
    </div>
 
@section Scripts {
    <script>
        $(document).ready(function () {
            console.log("ok");
          var table = $('#clientTable').DataTable({
            ajax: {
                "type": "POST",
                "url": "/ClientTasks?handler=List",
                "dataSrc": "",
                "beforeSend": function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                }
            },
            columns: [
                {
                    "data": "id",
                    visible: false
                },
                { data: "client.name" },
                {
                    data: "tasks", render: function (data, type, row) {
                        return data && Array.isArray(data)
                            ? data.map(task => `<span>${task.name}</span><br>`).join('')
                            : '';
                    }
                },
                {
                    data: null, render: function (data, type, row) {
                        return `
                            <div class="dropdown ms-auto" style="cursor:pointer;">
                                <i class="fas fa-ellipsis-vertical" data-bs-toggle="dropdown" aria-expanded="false"></i>
                                <ul class="dropdown-menu">
                                    <li>
                                        <span class="dropdown-item edit-client" style="cursor:pointer;">
                                            <i class="fas fa-pen mx-2"></i> Update
                                        </span>
                                    </li>
                                    <li>
                                        <span class="dropdown-item delete-client" style="cursor:pointer;">
                                            <i class="fas fa-trash mx-2"></i> Delete
                                        </span>
                                    </li>
                                </ul>
                            </div>
                        `;
                    }
                }
            ],
            dom: 'Bfrtip', // Add Buttons toolbar
            buttons: [
                {
                    extend: 'csvHtml5',
                    text: 'Export CSV',
                    title: 'ClientTasksData',  // Name of the exported CSV file
                    className: 'btn btn-primary', // Optional: Add custom class for styling
                        exportOptions: {
                            columns: ':not(:last-child)' // Exclude the last column
                        }
                }
            ]
        });
            var taskRowIndex = 0;

            function addTaskRow() {
                taskRowIndex++;

                var newRow = `
                                    <div class="mb-3" id="taskRow${taskRowIndex}">
                                                <label for="taskName" class="form-label">Task Name</label> <button type="button" class="btn btn-danger btn-sm ms-2 float-end mb-1" onclick="deleteTaskRow(${taskRowIndex})">Delete</button>
                                                        <input type="text" class="form-control" name="ClientTaskModel.Tasks[${taskRowIndex}].Name" required>
        
                                    </div>
                                `;

                $("#taskRows").append(newRow);
            }
            $('#clientTable tbody').on('click', 'span.edit-client', function () {
                
                var row = $(this).closest('tr');
                var data = table.row(row).data();
                // Convert the date strings to JavaScript Date objects
                var startDate = new Date(data.licenseStartDate);
                var endDate = new Date(data.licenseEndDate);

                // Format the dates as strings in "YYYY-MM-DD" format
                var formattedStartDate = startDate.toISOString().split('T')[0];
                var formattedEndDate = endDate.toISOString().split('T')[0];
                // Populate the edit modal form with the fetched data
                $('#clientModalEdit #ClientModel_Id').val(data.id);
                $('#clientModalEdit #ClientModel_ClientId').val(data.clientId);
                $('#clientModalEdit #ClientModel_LicenseNumber').val(data.Tasks);
                $('#clientModalEdit #ClientModel_LicenseStartDate')[0].value = formattedStartDate;
                $('#clientModalEdit #ClientModel_LicenseEndDate')[0].value = formattedEndDate;

                // Show the edit modal
                $('#clientModalEdit').modal('show');
            });

            function deleteTaskRow(index) {
                $("#taskRow" + index).remove();
            }
            $('#clientTable tbody').on('click', 'span.delete-client', function () {

                var row = $(this).closest('tr');
                var data = table.row(row).data();
                var id = data ? data.id : undefined;// Assuming Client ID is in the second column
                if (id) {
                    Swal.fire({
                        title: "Are you sure?",
                        text: "You won't be able to revert this!",
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#3085d6",
                        cancelButtonColor: "#d33",
                        confirmButtonText: "Yes, delete it!"
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $.ajax({
                                url: `/ClientTasks?handler=Delete&id=${id}`, // Adjust the URL based on your endpoint
                                type: 'POST',
                                beforeSend: function (xhr) {
                                    // Set the XSRF token
                                    xhr.setRequestHeader('XSRF-TOKEN', $('input:hidden[name="__RequestVerificationToken"]').val());
                                },
                                success: function (response) {
                                    // Handle success, e.g., show a success message
                                    table.ajax.reload();
                                    Swal.fire({
                                        title: 'Deleted!',
                                        text: 'The client has been deleted.',
                                        icon: 'success'
                                    });
                                },
                                error: function (error) {
                                    // Handle error, e.g., show an error message
                                    Swal.fire({
                                        title: 'Error!',
                                        text: 'An error occurred while deleting the client. ',
                                        icon: 'error'
                                    });
                                }
                            });
                        }
                    });
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: 'Client Task ID not found.',
                        icon: 'error'
                    });
                }
            });
        });
    </script>
    @* 
    <script>
        $(document).ready(function () {
            var table = $('#clientTable').DataTable({
                "ajax": {
                    "type" : "POST",
                    "url": "/Clients?handler=List",
                    "dataSrc": "",
                    "beforeSend": function (xhr) {
                        xhr.setRequestHeader("XSRF-TOKEN",
                            $('input:hidden[name="__RequestVerificationToken"]').val());
                    }
                },
                "columns": [ 
                    { "data": "name" },
                    { "data": "clientId" },
                    { "data": "licenseNumber" },
                    {
                        "data": "licenseStartDate",
                        "render": function (data, type, row) {
                            // Format date as mm/dd/yyyy
                            var startDate = new Date(data);
                            return startDate.getDate() + 1 + '-' + startDate.getMonth() + 1 +'-' + startDate.getFullYear();
                        }
                    },
                    {
                        "data": "licenseEndDate",
                        "render": function (data, type, row) {
                            // Format date as mm/dd/yyyy
                            var endDate = new Date(data);
                            return endDate.getDate() + 1 + '-' + endDate.getMonth() + 1 +'-' + endDate.getFullYear();
                        }
                    },
                    {
                        "data": "licenseStatus",
                        "render": function (data, type, row) {
                            return data
                                ? '<span class="badge bg-success">Active</span>'
                                : '<span class="badge bg-danger">Expired</span>';
                        }
                    },
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            return '<div class="dropdown ms-auto" style="cursor:pointer;">' +
                                '<i class="fas fa-ellipsis-vertical" data-bs-toggle="dropdown" aria-expanded="false"></i>' +
                                '<ul class="dropdown-menu">' +
                                '<li>' +
                                '<span class="dropdown-item edit-client" style="cursor:pointer;">' +
                                '<i class="fas fa-pen mx-2"></i> Update' +
                                '</span>' +
                                '</li>' +
                                '<li>' +
                                '<span class="dropdown-item delete-client" style="cursor:pointer;">' +
                                '<i class="fas fa-trash mx-2"></i> Delete' +
                                '</span>' +
                                '</li>' +
                                '</ul>' +
                                '</div>';
                        }


                    }
                ],
                "order": [[2, 'asc']]
            });

            $('#sortClientId').click(function () {
                sortTable(2);
            });

            $('#sortLicenseNumber').click(function () {
                sortTable(3);
            });

            function sortTable(column) {
                var order = table.order()[0][0];
                table.order([order, (order === column ? 'desc' : 'asc')]).draw();
            }

            // Edit button click event handler
            $('#clientTable tbody').on('click', 'span.edit-client', function () {
                
                var row = $(this).closest('tr');
                var data = table.row(row).data();
                // Convert the date strings to JavaScript Date objects
                var startDate = new Date(data.licenseStartDate);
                var endDate = new Date(data.licenseEndDate);

                // Format the dates as strings in "YYYY-MM-DD" format
                var formattedStartDate = startDate.toISOString().split('T')[0];
                var formattedEndDate = endDate.toISOString().split('T')[0];
                // Populate the edit modal form with the fetched data
                $('#clientModalEdit #ClientModel_Id').val(data.id);
                $('#clientModalEdit #ClientModel_Name').val(data.name);
                $('#clientModalEdit #ClientModel_ClientId').val(data.clientId);
                $('#clientModalEdit #ClientModel_LicenseNumber').val(data.licenseNumber);
                $('#clientModalEdit #ClientModel_LicenseStartDate')[0].value = formattedStartDate;
                $('#clientModalEdit #ClientModel_LicenseEndDate')[0].value = formattedEndDate;

                // Show the edit modal
                $('#clientModalEdit').modal('show');
            });

            $('#clientTable tbody').on('click', 'span.delete-client', function () {
                
                var row = $(this).closest('tr');
                var id = table.row(row).data().id;
                Swal.fire({
                    title: "Are you sure?",
                    text: "You won't be able to revert this!",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Yes, delete it!"
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: `/Clients?handler=Delete&id=${id}`, // Adjust the URL based on your endpoint
                            type: 'POST',
                            beforeSend: function (xhr) {
                                // Set the XSRF token
                                xhr.setRequestHeader('XSRF-TOKEN', $('input:hidden[name="__RequestVerificationToken"]').val());
                            },
                            success: function (response) {
                                // Handle success, e.g., show a success message
                                table.ajax.reload();
                                Swal.fire({
                                    title: 'Deleted!',
                                    text: 'The client has been deleted.',
                                    icon: 'success'
                                });
                            },
                            error: function (error) {
                                // Handle error, e.g., show an error message
                                Swal.fire({
                                    title: 'Error!',
                                    text: 'An error occurred while deleting the client.',
                                    icon: 'error'
                                });
                            }
                        });
                    }
                });
            });
        });
       


       
    </script> *@

}
