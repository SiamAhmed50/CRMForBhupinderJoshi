@page
@model CRM.Web.Pages.JobsModel

@{
    ViewData["Title"] = "Jobs";
}
<form method="post">
    @Html.AntiForgeryToken()
    <!-- Other form fields -->
</form>
<div class="row">
    <div class="col-sm-6 text-start">
        <h2>Jobs</h2>
    </div>
</div>
<div class="container mt-4">
    <table id="jobsTable" class="table table-striped table-bordered">
        <thead>
            <tr>
                <th hidden>Id</th>
                <th>Client Name</th>
                <th>Task Name</th>
                <th>Status</th>
                <th>Started</th>
                <th>Ended</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>
<div class="modal fade" id="logModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <form method="post">
                <div class="modal-header">
                    <h4 class="modal-title" id="exampleModalLabel1">Logs</h4>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <table id="logTable" class="table table-striped table-bordered">
                        <thead>
                            <tr>
                                <th>Timestamp</th>
                                <th>Log Message</th>
                                <th>Log Level</th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                </div>

            </form>
        </div>
    </div>
</div>


<div class="modal fade" id="transactionModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Transactions</h4>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <table id="transactionTable" class="table table-striped table-bordered">
                    <thead>
                        <tr>
                            <th>Job ID</th>
                            <th>Trnx No</th>
                            <th>Trnx Remarks</th>
                            <th>Trnx Status</th>
                            <th>Trnx Command</th>
                            <th>Timestamp</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
</div>




@section Scripts {
    <script>
        $(document).ready(function () {
            var table = $('#jobsTable').DataTable({
                ajax: {
                    "type": "POST",
                    "url": "/Jobs?handler=List",
                    "dataSrc": "",
                    "beforeSend": function (xhr) {
                        var token = $('input:hidden[name="__RequestVerificationToken"]').val();
                        xhr.setRequestHeader("XSRF-TOKEN", token);
                    }
                },
                "columns": [
                    { data: "id", visible: false },
                    { data: "clientName" },
                    { data: "taskName" },
                    { data: "taskStatus" },
                    {
                        data: "startDate",
                        render: function (data) {
                            var startDate = new Date(data);
                            return ('0' + (startDate.getMonth() + 1)).slice(-2) + '-' +
                                ('0' + startDate.getDate()).slice(-2) + '-' +
                                startDate.getFullYear() + ' ' +
                                ('0' + startDate.getHours()).slice(-2) + ':' +
                                ('0' + startDate.getMinutes()).slice(-2) + ':' +
                                ('0' + startDate.getSeconds()).slice(-2);
                        }
                    },
                    {
                        data: "endDate",
                        render: function (data) {
                            if (data != '') {
                                var endDate = new Date(data);
                                return ('0' + (endDate.getMonth() + 1)).slice(-2) + '-' +
                                    ('0' + endDate.getDate()).slice(-2) + '-' +
                                    endDate.getFullYear() + ' ' +
                                    ('0' + endDate.getHours()).slice(-2) + ':' +
                                    ('0' + endDate.getMinutes()).slice(-2) + ':' +
                                    ('0' + endDate.getSeconds()).slice(-2);
                            }
                            return '';
                        }
                    },

                    {
                        data: null,
                        render: function (data, type, row) {
                            let isRunning = row.taskStatus === "Running";
                            let stopTabClass = isRunning ? "" : "text-muted";
                            let stopTabStyle = isRunning ? "cursor:pointer;" : "cursor:not-allowed;";

                            return `
                                            <div class="dropdown ms-auto" style="cursor:pointer;">
                                                <i class="fas fa-ellipsis-vertical" data-bs-toggle="dropdown" data-bs-target="#logModal" aria-expanded="false"></i>
                                                <ul class="dropdown-menu">
                                                    <li>
                                                        <span class="dropdown-item view-logs" style="cursor:pointer;">
                                                            <i class="fas fa-pen mx-2"></i>View Logs
                                                        </span>
                                                    </li>
                                                    <li>
                                                        <span class="dropdown-item view-transactions" style="cursor:pointer;">
                                                               <i class="fas fa-exchange-alt mx-2"></i>Transactions
                                                        </span>
                                                     </li>

                                                     <li>
                                                        <span class="dropdown-item view-stopbybot ${stopTabClass}" data-id="${row.id}" style="${stopTabStyle}">
                                                                        <i class="fas fa-stop mx-2"></i>Stop Job
                                                        </span>
                                                    </li>

                                                </ul>
                                            </div>
                                        `;
                        }
                    }
                ],
                order: [[2, 'asc']],
                dom: 'Bfrtip', // Add Buttons toolbar
                buttons: [
                    {
                        extend: 'csvHtml5',
                        text: 'Export CSV',
                        title: 'JobsData',  // Name of the exported CSV file
                        className: 'btn btn-primary', // Optional: Add custom class for styling
                        exportOptions: {
                            columns: ':not(:last-child)' // Exclude the last column
                        }
                    }
                ]
            });


            var logTable;
            var transactionTable;

            // View Logs
            $('#jobsTable tbody').on('click', 'span.view-logs', function () {
                debugger;
                var row = $(this).closest('tr');
                var data = table.row(row).data();
                var id = data.id;
                console.log("Job ID:", id);

                // Initialize or reload the logTable DataTable
                if ($.fn.DataTable.isDataTable('#logTable')) {
                    logTable.ajax.url(`/Jobs?handler=LogList&id=${id}`).load();
                } else {
                    logTable = $('#logTable').DataTable({
                        ajax: {
                            type: "POST",
                            url: `/Jobs?handler=LogList&id=${id}`,
                            dataSrc: "",
                            beforeSend: function (xhr) {
                                var token = $('input:hidden[name="__RequestVerificationToken"]').val();
                                xhr.setRequestHeader("XSRF-TOKEN", token);
                            },
                            error: function (xhr, status, error) {
                                console.log("Error:", status, error);
                                console.log("Response Text:", xhr.responseText);
                            }
                        },
                        columns: [
                            {
                                data: "timestamp",
                                render: function (data) {
                                    var date = new Date(data);
                                    return ('0' + (date.getMonth() + 1)).slice(-2) + '-' +
                                        ('0' + date.getDate()).slice(-2) + '-' +
                                        date.getFullYear() + ' ' +
                                        ('0' + date.getHours()).slice(-2) + ':' +
                                        ('0' + date.getMinutes()).slice(-2) + ':' +
                                        ('0' + date.getSeconds()).slice(-2);
                                }
                            },
                            { data: "logMessage" },
                            { data: "logType" }
                        ],
                        order: [[0, 'desc']],
                        dom: 'Bfrtip', // Enable buttons extension
                        buttons: [
                            {
                                extend: 'csvHtml5',
                                text: 'Export CSV',
                                title: 'LogData',
                                className: 'btn btn-primary' // Optional: Custom styling

                            },
                            {
                                text: 'Refresh',
                                className: 'btn btn-secondary', // Optional: Custom styling for the Refresh button
                                action: function (e, dt, node, config) {
                                    dt.ajax.reload(); // Reload the DataTable
                                }
                            }
                        ]
                    });
                }

                $('#logModal').modal('show');
                logTable.ajax.reload();
            });

            // View Transactions
            $('#jobsTable tbody').on('click', 'span.view-transactions', function () {
                var row = $(this).closest('tr');
                var data = table.row(row).data();
                var id = data.id;

                if ($.fn.DataTable.isDataTable('#transactionTable')) {
                    transactionTable.ajax.url(`/Jobs?handler=TransactionList&id=${id}`).load();
                } else {
                    transactionTable = $('#transactionTable').DataTable({
                        ajax: {
                            type: "POST",
                            url: `/Jobs?handler=TransactionList&id=${id}`,
                            dataSrc: "",
                            beforeSend: function (xhr) {
                                var token = $('input:hidden[name="__RequestVerificationToken"]').val();
                                xhr.setRequestHeader("XSRF-TOKEN", token);
                            }
                        },
                        columns: [
                            { data: "jobId" },
                            { data: "transactionNumber" },
                            { data: "transactionDescription" },
                            { data: "transactionStatus" },
                            { data: "transactionCommand" },
                            {
                                data: "timestamp",
                                render: function (data) {
                                    var date = new Date(data);
                                    return ('0' + (date.getMonth() + 1)).slice(-2) + '-' +
                                        ('0' + date.getDate()).slice(-2) + '-' +
                                        date.getFullYear() + ' ' +
                                        ('0' + date.getHours()).slice(-2) + ':' +
                                        ('0' + date.getMinutes()).slice(-2) + ':' +
                                        ('0' + date.getSeconds()).slice(-2);
                                }
                            }
                        ],
                        order: [[5, 'desc']],
                        dom: 'Bfrtip',
                        //buttons: ['csvHtml5']
                        buttons: [
                            {
                                extend: 'csvHtml5',
                                text: 'Export CSV',
                                title: 'TrnxLogData',
                                className: 'btn btn-primary' // Optional: Custom styling

                            },
                            {
                                text: 'Refresh',
                                className: 'btn btn-secondary', // Optional: Custom styling for the Refresh button
                                action: function (e, dt, node, config) {
                                    dt.ajax.reload(); // Reload the DataTable
                                }
                            }
                        ]
                    });
                }

                $('#transactionModal').modal('show');
                transactionTable.ajax.reload();
            });

         
            // Handle Stop By Bot Click Event

            $('#jobsTable tbody').on('click', '.view-stopbybot', function () {
                let stopTab = $(this);
                if (stopTab.hasClass('text-muted')) return; // Prevent clicking when disabled

                let jobId = stopTab.data("id");

                Swal.fire({
                    title: "Are you sure?",
                    text: "Do you want to stop the job?",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Yes, stop it!"
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            type: "POST",
                            url: "/Jobs?handler=StopJob",
                            data: { id: jobId },
                            beforeSend: function (xhr) {
                                var token = $('input:hidden[name="__RequestVerificationToken"]').val();
                                xhr.setRequestHeader("XSRF-TOKEN", token);
                            },
                            success: function (response) {
                                if (response.status === "success") {
                                    Swal.fire({
                                        title: "Stopped!",
                                        text: response.message,//"Job stopped successfully.",
                                        icon: "success"
                                    });
                                    table.ajax.reload();
                                } else {
                                    Swal.fire({
                                        title: "Failed!",
                                        text: response.message, //"Failed to stop the job.",
                                        icon: "error"
                                    });
                                }
                            },
                            error: function () {
                                Swal.fire({
                                    title: "Error!",
                                    text: "An error occurred while stopping the job.",
                                    icon: "error"
                                });
                            }
                        });
                    }
                });
            });

        });
    </script>
}