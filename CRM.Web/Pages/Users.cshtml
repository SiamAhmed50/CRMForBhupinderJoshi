@page
@using CRM.UI.Helpers
@model UsersModel
@{
    ViewData["Title"] = "User Management";
}
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<link href="https://cdn.datatables.net/1.13.4/css/jquery.dataTables.min.css" rel="stylesheet" />

<div class="row">
    <div class="col-sm-6">
        <h2>Users</h2>
    </div>
    <div class="col-sm-6 text-end">
        <button id="addUserBtn" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addUserModal">Add User</button>
    </div>
</div>

<div class="container mt-4">
    <table id="userTable" class="table table-bordered">
        <thead>
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Menus</th>
                <th>Clients</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
</div>

<div class="modal fade" id="addUserModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <form id="userForm" method="post" asp-page-handler="Register">
            <input type="hidden" id="isEdit" name="IsEdit" />
            @Html.AntiForgeryToken()
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Register User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="name" class="form-label">Full Name</label>
                        <input type="text"
                               class="form-control"
                               name="Name"
                               id="name"
                               placeholder="Full Name"
                               required />
                    </div>

                    <div class="mb-3">
                        <label for="email" class="form-label">Email Address</label>
                        <input type="email"
                               class="form-control"
                               name="Email"
                               id="email"
                               placeholder="Email"
                               required />
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <input type="password"
                               class="form-control"
                               name="Password"
                               id="password"
                               placeholder="Password"
                               required />
                    </div>

                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Confirm Password</label>
                        <input type="password"
                               class="form-control"
                               name="ConfirmPassword"
                               id="confirmPassword"
                               placeholder="Confirm Password"
                               required />
                    </div>

                    <div class="mb-3">
                        <label for="menus" class="form-label">Select Menus</label>
                        <select class="form-select"
                                name="MenuIds"
                                id="menus"
                                multiple="multiple"
                                required>
                            @foreach (var menu in Model.AllMenus)
                            {
                                <option value="@menu.Id">@menu.Name</option>
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="clients" class="form-label">Select Client(s)</label>
                        <select class="form-select"
                                name="ClientIds"
                                id="clients"
                                multiple="multiple"
                                required>
                            @foreach (var client in Model.AllClients)
                            {
                                <option value="@client.Id">@client.Name</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Register</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts { 

    <script>
        $(document).ready(function () {
            const userTable = $('#userTable').DataTable({
                ajax: {
                    url: '/Users?handler=List',
                    type: 'GET',
                    dataSrc: 'data'
                },
                columns: [
                    { data: 'name' },
                    { data: 'email' },
                    {
                        data: 'menuNames',
                        render: function (data) {
                            return Array.isArray(data) ? data.join(', ') : '';
                        }
                    },
                    {
                        data: 'clientNames',
                        render: function (data) {
                            return Array.isArray(data) ? data.join(', ') : '';
                        }
                    },
                    {
                        data: null,
                        render: function (data, type, row) {
                            return ` 
                                <button class="btn btn-sm btn-danger ms-1 delete-btn" 
                                        data-email="${row.email}">Delete</button>`;
                        }
                    }
                ]
            });

            // Reset form on opening modal
            $('#addUserBtn').click(function () {
                $('#userForm')[0].reset();
                $('#menus').val(null).trigger('change');
                $('#clients').val(null).trigger('change');
                $('#email').prop('readonly', false);
                $('#isEdit').val('');
            });

            $('#addUserModal').on('shown.bs.modal', function () {
                $('#menus').select2({
                    dropdownParent: $('#addUserModal'),
                    width: '100%',
                    placeholder: "Select menus",
                    allowClear: true
                });
                $('#clients').select2({
                    dropdownParent: $('#addUserModal'),
                    width: '100%',
                    placeholder: "Select menus",
                    allowClear: true
                });
            });

            $('#userForm').on('submit', function (e) {
                e.preventDefault();

                const formData = new FormData(this);

                $.ajax({
                    url: '/Users?handler=Register',
                    type: 'POST',
                    processData: false,
                    contentType: false,
                    data: formData,
                    success: function () {
                        $('#addUserModal').modal('hide');
                        userTable.ajax.reload();
                        Swal.fire("Success", "User registered", "success");
                    },
                    error: function (xhr) {
                        let msg = "Failed to register user";
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            msg = xhr.responseJSON.message;
                        }
                        Swal.fire("Error", msg, "error");
                    }
                });
            });

            $('#userTable').on('click', '.edit-btn', function () {
                const name = $(this).data('name');
                const email = $(this).data('email');
                const menuIds = $(this).data('menuids');

                $('#name').val(name);
                $('#email').val(email).prop('readonly', true);
                $('#password').val('');
                $('#confirmPassword').val('');
                $('#menus').val(menuIds).trigger('change');
                $('#isEdit').val('true');

                $('#addUserModal').modal('show');
            });

            $('#userTable').on('click', '.delete-btn', function () {
                debugger;
                const email = $(this).data('email');
                debugger;
                Swal.fire({
                    title: "Are you sure?",
                    text: "You won't be able to revert this!",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Yes, delete it!"
                }).then((result) => {
                    if (result.isConfirmed) {
                        debugger;
                        const formData = new FormData();
                        formData.append("email", email);

                        $.ajax({
                            url: `/Users?handler=Delete`,
                            type: 'POST',
                            data: formData,
                            beforeSend: function (xhr) {
                                // Set the XSRF token
                                xhr.setRequestHeader('XSRF-TOKEN', $('input:hidden[name="__RequestVerificationToken"]').val());
                            },
                            processData: false,
                            contentType: false,
                            success: function () {
                                userTable.ajax.reload();
                                Swal.fire("Deleted!", "User has been deleted.", "success");
                            },
                            error: function () {
                                Swal.fire("Error!", "Failed to delete user.", "error");
                            }
                        });
                    }
                });
            });

        });
    </script>
}
