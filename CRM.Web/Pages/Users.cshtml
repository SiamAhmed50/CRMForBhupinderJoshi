@page
@using CRM.UI.Helpers
@model UsersModel


@{
    ViewData["Title"] = "User Management";
}
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<link href="https://cdn.datatables.net/1.13.4/css/jquery.dataTables.min.css" rel="stylesheet" />

<div class="row">
    <div class="col-sm-6">
        <h2>Users</h2>
    </div>
    <div class="col-sm-6 text-end">
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addUserModal">Add User</button>
    </div>
</div>

<div class="container mt-4">
    <table id="userTable" class="table table-bordered">
        <thead>
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Menus</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
</div>

<div class="modal fade" id="addUserModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <form id="userForm" method="post" asp-page-handler="Register">
            <input type="hidden" id="isEdit" name="IsEdit" />

            @Html.AntiForgeryToken()
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Register User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <input type="text" class="form-control mb-2" name="Name" id="name" placeholder="Full Name" required />
                    <input type="email" class="form-control mb-2" name="Email" id="email" placeholder="Email" required />
                    <input type="password" class="form-control mb-2" name="Password" id="password" placeholder="Password" required />
                    <input type="password" class="form-control mb-2" name="ConfirmPassword" id="confirmPassword" placeholder="Confirm Password" required />

                    <label>Select Menus</label>
                    <select class="form-select mb-2" name="MenuIds" multiple="multiple" id="menus" required>
                        @foreach (var menu in Model.AllMenus)
                        {
                            <option value="@menu.Id">@menu.Name</option>
                        }
                    </select>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Register</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </form>

    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        $(document).ready(function () {
            // Initialize DataTable
            const userTable = $('#userTable').DataTable({
                ajax: {
                    url: '/Users?handler=List',
                    type: 'GET',
                    dataSrc: 'data'
                },
                columns: [
                    { data: 'name' },
                    { data: 'email' },
                    {
                        data: 'menuNames',
                        render: function (data) {
                            return Array.isArray(data) ? data.join(', ') : '';
                        }
                    },

                    {
                        data: null,
                        render: function (data, type, row) {
                            return `<button class="btn btn-sm btn-secondary edit-btn"
                            data-name="${row.name}"
                            data-email="${row.email}"
                            data-menuids='${JSON.stringify(row.menuIds)}'>
                            Edit
                        </button>`;
                        }
                    }
                ]
            });

            // Register modal select2
            $('#addUserModal').on('shown.bs.modal', function () {
                $('#menus').select2({
                    dropdownParent: $('#addUserModal'),
                    width: '100%',
                    placeholder: "Select menus",
                    allowClear: true
                });
            });






            $('#userForm').on('submit', function (e) {
                e.preventDefault();

                const formData = new FormData(this);

                $.ajax({
                    url: '/Users?handler=Register',
                    type: 'POST',
                    processData: false,
                    contentType: false,
                    data: formData,
                    success: function () {
                        $('#addUserModal').modal('hide');
                        userTable.ajax.reload();
                        Swal.fire("Success", "User registered", "success");
                    },
                    error: function (xhr) {
                        let msg = "Failed to register user";
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            msg = xhr.responseJSON.message;
                        }
                        Swal.fire("Error", msg, "error");
                    }
                });
            });








            $('#userTable').on('click', '.edit-btn', function () {
                const name = $(this).data('name');
                const email = $(this).data('email');
                const menuIds = $(this).data('menuids');

                $('#name').val(name);
                $('#email').val(email).prop('readonly', true); // make email readonly if it's identifier
                $('#password').val('');
                $('#confirmPassword').val('');
                $('#menus').val(menuIds).trigger('change');

                $('#isEdit').val('true');

                // Open the modal
                $('#addUserModal').modal('show');
            });





























            // Submit form
            // $('#userForm').on('submit', function (e) {
            //     e.preventDefault();




            //     debugger


            //     const name = $('#name').val();
            //     const email = $('#email').val();
            //     const password = $('#password').val();
            //     const confirmPassword = $('#confirmPassword').val();
            //     const menuIds = $('#menus').val()?.map(Number) ?? [];

            //     console.log(name, email, password, confirmPassword, menuIds); // Debug

            //     const userData = {
            //         userName: $('#name').val(),
            //         email: $('#email').val(),
            //         password: $('#password').val(),
            //         confirmPassword: $('#confirmPassword').val(),
            //         menuIds: $('#menus').val().map(Number)
            //     };
                

            //     $.ajax({
            //         url: '/Users?handler=Register',
            //         type: 'POST',
            //         contentType: 'application/json',
            //         data: JSON.stringify(userData),
            //         success: function () {
            //             $('#addUserModal').modal('hide');
            //             userTable.ajax.reload();
            //             Swal.fire("Success", "User registered", "success");
            //         },
            //         error: function (xhr) {
            //             let msg = "Failed to register user";
            //             if (xhr.responseJSON && xhr.responseJSON.message) {
            //                 msg = xhr.responseJSON.message;
            //             } else if (xhr.responseText) {
            //                 msg = xhr.responseText;
            //             }
            //             console.log("Error:", msg);
            //             Swal.fire("Error", msg, "error");
            //         }

            //     });
            // });
        });
    </script>
}